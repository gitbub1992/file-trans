NAME: edp-pro
LAST DEPLOYED: Thu Mar 25 12:49:37 2021
NAMESPACE: edp
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
admin-console-operator:
  adminConsole:
    basePath: ""
    image: epamedp/edp-admin-console
    imagePullSecrets: null
    imageStreamUrlMask: /console/project/{namespace}/browse/images/{stream}
    projectUrlMask: /console/project/{namespace}/overview
    version: 2.6.0
  image:
    name: epamedp/admin-console-operator
    version: v2.5.0
cd-pipeline-operator:
  image:
    name: epamedp/cd-pipeline-operator
    version: v2.5.0
codebase-operator:
  image:
    name: epamedp/codebase-operator
    version: v2.5.0
  jira:
    apiUrl: https://jiraeu-api.epam.com
    credentialName: epam-jira-user
    integration: true
    name: epam-jira
    rootUrl: https://jiraeu.epam.com
dockerRegistry:
  url: 093899590031.dkr.ecr.eu-central-1.amazonaws.com
edp:
  adminGroups:
  - stub-group-admin
  developerGroups:
  - stub-group-developer
gerrit-operator:
  gerrit:
    deploy: true
    image: openfrontier/gerrit
    imagePullSecrets: null
    name: gerrit
    sshPort: "22"
    storage:
      class: cbs
      size: 10Gi
    version: 3.2.3
  image:
    name: epamedp/gerrit-operator
    version: v2.5.0
global:
  admins:
  - stub_user_one@example.com
  database:
    deploy: true
    host: null
    image: postgres:9.6
    name: edp-db
    port: 5432
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 64Mi
    storage:
      class: cbs
      size: 10Gi
  developers:
  - stub_user_one@example.com
  - stub_user_two@example.com
  dnsWildCard: delivery.aws.main.edp.projects.epam.com
  edpName: edp
  platform: kubernetes
  version: v2.5.0
  webConsole:
    enabled: true
    url: https://master.delivery.aws.main.edp.projects.epam.com
jenkins-operator:
  image:
    name: epamedp/jenkins-operator
    version: v2.5.0
  jenkins:
    basePath: ""
    deploy: true
    image: epamedp/edp-jenkins
    initImage: null
    libraryPipelinesRepo: https://github.com/epmd-edp/edp-library-pipelines.git
    libraryPipelinesVersion: release-2.7
    libraryStagesRepo: https://github.com/epmd-edp/edp-library-stages.git
    libraryStagesVersion: release-2.7
    pullSecrets: null
    storage:
      class: cbs
      size: 10Gi
    version: 2.6.0
keycloak-operator:
  image:
    name: epamedp/keycloak-operator
    version: v1.5.0
  keycloak:
    url: https://keycloak-keycloak.delivery.aws.main.edp.projects.epam.com
nexus-operator:
  image:
    name: epamedp/nexus-operator
    version: v2.5.0
  nexus:
    basePath: ""
    deploy: true
    image: sonatype/nexus3
    imagePullSecrets: null
    name: nexus
    storage:
      class: cbs
      size: 10Gi
    version: 3.27.0
perf:
  enabled: "false"
perf-operator:
  image:
    name: epamedp/perf-operator
    version: v2.6.0
  perf:
    apiUrl: https://perf.delivery.epam.com
    credentialName: epam-perf-user
    integration: true
    luminate:
      apiUrl: https://api.epam.luminatesec.com
      credentialName: luminate-secret
      enabled: true
    name: epam-perf
    projectName: EPMD-EDP
    rootUrl: https://perf.delivery.epam.com
reconciler:
  image:
    name: epamedp/reconciler
    version: v2.5.0
sonar-operator:
  image:
    name: epamedp/sonar-operator
    version: v2.5.0
  sonar:
    basePath: ""
    dbImage: postgres:9.6
    deploy: true
    image: sonarqube
    imagePullSecrets: null
    initImage: busybox
    name: sonar
    storage:
      data:
        class: cbs
        size: 10Gi
      database:
        class: cbs
        size: 10Gi
    version: 7.9-community
tags:
  admin-console-operator: false
  cd-pipeline-operator: false
  codebase-operator: false
  edp-component-operator: false
  gerrit-operator: false
  jenkins-operator: false
  keycloak-operator: false
  nexus-operator: false
  perf-operator: false
  reconciler: false
  sonar-operator: false
vcs:
  enabled: "false"

COMPUTED VALUES:
admin-console-operator:
  adminConsole:
    basePath: ""
    image: epamedp/edp-admin-console
    imagePullSecrets: null
    imageStreamUrlMask: /console/project/{namespace}/browse/images/{stream}
    projectUrlMask: /console/project/{namespace}/overview
    version: 2.6.0
  image:
    name: epamedp/admin-console-operator
    version: v2.5.0
cd-pipeline-operator:
  image:
    name: epamedp/cd-pipeline-operator
    version: v2.5.0
codebase-operator:
  image:
    name: epamedp/codebase-operator
    version: v2.5.0
  jira:
    apiUrl: https://jiraeu-api.epam.com
    credentialName: epam-jira-user
    integration: true
    name: epam-jira
    rootUrl: https://jiraeu.epam.com
dockerRegistry:
  url: 093899590031.dkr.ecr.eu-central-1.amazonaws.com
edp:
  adminGroups:
  - stub-group-admin
  developerGroups:
  - stub-group-developer
gerrit-operator:
  gerrit:
    deploy: true
    image: openfrontier/gerrit
    imagePullSecrets: null
    name: gerrit
    sshPort: "22"
    storage:
      class: cbs
      size: 10Gi
    version: 3.2.3
  image:
    name: epamedp/gerrit-operator
    version: v2.5.0
global:
  admins:
  - stub_user_one@example.com
  database:
    deploy: true
    image: postgres:9.6
    name: edp-db
    port: 5432
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 64Mi
    storage:
      class: cbs
      size: 10Gi
  developers:
  - stub_user_one@example.com
  - stub_user_two@example.com
  dnsWildCard: delivery.aws.main.edp.projects.epam.com
  edpName: edp
  platform: kubernetes
  version: v2.5.0
  webConsole:
    enabled: true
    url: https://master.delivery.aws.main.edp.projects.epam.com
jenkins-operator:
  image:
    name: epamedp/jenkins-operator
    version: v2.5.0
  jenkins:
    basePath: ""
    deploy: true
    image: epamedp/edp-jenkins
    initImage: null
    libraryPipelinesRepo: https://github.com/epmd-edp/edp-library-pipelines.git
    libraryPipelinesVersion: release-2.7
    libraryStagesRepo: https://github.com/epmd-edp/edp-library-stages.git
    libraryStagesVersion: release-2.7
    pullSecrets: null
    storage:
      class: cbs
      size: 10Gi
    version: 2.6.0
keycloak-operator:
  image:
    name: epamedp/keycloak-operator
    version: v1.5.0
  keycloak:
    url: https://keycloak-keycloak.delivery.aws.main.edp.projects.epam.com
nexus-operator:
  image:
    name: epamedp/nexus-operator
    version: v2.5.0
  nexus:
    basePath: ""
    deploy: true
    image: sonatype/nexus3
    imagePullSecrets: null
    name: nexus
    storage:
      class: cbs
      size: 10Gi
    version: 3.27.0
perf:
  enabled: "false"
perf-operator:
  image:
    name: epamedp/perf-operator
    version: v2.6.0
  perf:
    apiUrl: https://perf.delivery.epam.com
    credentialName: epam-perf-user
    integration: true
    luminate:
      apiUrl: https://api.epam.luminatesec.com
      credentialName: luminate-secret
      enabled: true
    name: epam-perf
    projectName: EPMD-EDP
    rootUrl: https://perf.delivery.epam.com
reconciler:
  image:
    name: epamedp/reconciler
    version: v2.5.0
sonar-operator:
  image:
    name: epamedp/sonar-operator
    version: v2.5.0
  sonar:
    basePath: ""
    dbImage: postgres:9.6
    deploy: true
    image: sonarqube
    imagePullSecrets: null
    initImage: busybox
    name: sonar
    storage:
      data:
        class: cbs
        size: 10Gi
      database:
        class: cbs
        size: 10Gi
    version: 7.9-community
tags:
  admin-console-operator: false
  cd-pipeline-operator: false
  codebase-operator: false
  edp-component-operator: false
  gerrit-operator: false
  jenkins-operator: false
  keycloak-operator: false
  nexus-operator: false
  perf-operator: false
  reconciler: false
  sonar-operator: false
vcs:
  enabled: "false"

HOOKS:
MANIFEST:
---
# Source: edp-install/templates/kubernetes/privileged-policy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
  labels:
    eks.amazonaws.com/component: pod-security-policy
    kubernetes.io/cluster-service: "true"
  name: privileged
spec:
  allowPrivilegeEscalation: true
  allowedCapabilities:
    - '*'
  fsGroup:
    rule: RunAsAny
  hostIPC: true
  hostNetwork: true
  hostPID: true
  hostPorts:
    - max: 65535
      min: 0
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - '*'
---
# Source: edp-install/templates/kubernetes/restricted-policy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
spec:
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  requiredDropCapabilities:
    - KILL
    - MKNOD
    - SETUID
    - SETGID
  volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - persistentVolumeClaim
    - projected
    - secret
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
---
# Source: edp-install/templates/edp-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edp
  namespace: edp
---
# Source: edp-install/templates/gitlab-ci-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-ci
  namespace: edp
---
# Source: edp-install/templates/edp_config_map.yaml
apiVersion: v1
data:
  edp_name: edp
  edp_version: v2.5.0
  dns_wildcard: delivery.aws.main.edp.projects.epam.com
  perf_integration_enabled: "false"
  vcs_integration_enabled: "false"
kind: ConfigMap
metadata:
  name: edp-config
---
# Source: edp-install/templates/gt-template.yaml
apiVersion: v1
data:
  gt.json: |
            {
              "apiVersion": "v2.edp.epam.com/v1alpha1",
              "kind": "GitTag",
              "metadata": {
                "name": "replace"
              },
              "spec": {
                "codebase": "replace",
                "branch": "replace",
                "tag": "replace"
              }
            }
kind: ConfigMap
metadata:
  name: gt-template
---
# Source: edp-install/templates/ist-template.yaml
apiVersion: v1
data:
  ist.json: |
            {
              "apiVersion": "v2.edp.epam.com/v1alpha1",
              "kind": "ImageStreamTag",
              "metadata": {
                "name": "replace"
              },
              "spec": {
                "codebaseImageStreamName": "replace",
                "tag": "replace"
              }
            }
kind: ConfigMap
metadata:
  name: ist-template
---
# Source: edp-install/templates/db/volume.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: edp-db
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: cbs
  volumeMode: Filesystem
---
# Source: edp-install/templates/kubernetes/clusterrole_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edp-deploy-role-edp
rules:
- apiGroups:
    - "*"
  attributeRestrictions: null
  resources:
    - namespaces
  verbs:
    - get
    - list
    - create
    - patch
- apiGroups:
    - ""
    - network.openshift.io
  attributeRestrictions: null
  resources:
    - ""
  verbs:
    - list
    - get
- apiGroups:
    - ""
    - network.openshift.io
  attributeRestrictions: null
  resources:
    - netnamespaces
  verbs:
    - get
    - update
- apiGroups:
    - ""
    - image.openshift.io
  attributeRestrictions: null
  resources:
    - imagestreamimages
    - imagestreammappings
    - imagestreams
    - imagestreamtags
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - ""
    - image.openshift.io
  attributeRestrictions: null
  resources:
    - imagestreams/layers
  verbs:
    - get
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - clusterrolebindings
  verbs:
    - delete
- apiGroups:
    - "*"
  attributeRestrictions: null
  resources:
    - templates
  verbs:
    - watch
- apiGroups:
    - "*"
  attributeRestrictions: null
  resources:
    - templates
    - processedtemplates
    - rolebindings
    - roles
    - clusterroles
    - clusterrolebindings
    - projectrequests
    - projects
    - namespaces
    - pods
    - pods/exec
    - groups
    - users
    - securitycontextconstraints
    - podsecuritypolicies
    - pods/portforward
    - jobs
    - configmaps
    - routes
    - imagestreams
    - buildconfigs
  verbs:
    - get
    - list
    - create
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - storageclasses
  verbs:
    - get
    - list
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - configmaps
    - routes
    - imagestreams
    - buildconfigs
    - jobs
    - groups
    - users
    - securitycontextconstraints
    - podsecuritypolicies
  verbs:
    - patch
    - update
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - jobs
    - namespaces
  verbs:
    - delete
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - secrets
  verbs:
    - create
- apiGroups:
    - '*'
  attributeRestrictions: null
  resourceNames:
    - vcs-autouser
    - gerrit-admin
    - jenkins-token
    - keycloak-admin
    - keycloak-gerrit
    - gerrit-project-creator
    - keycloak
    - keycloak-parameters
    - admin-console-client
  resources:
    - secrets
  verbs:
    - get
- apiGroups:
    - "*"
  attributeRestrictions: null
  resourceNames:
    - edp-jenkins
  resources:
    - roles
    - rolebindings
    - clusterroles
  verbs:
    - patch
    - update
- apiGroups:
    - '*'
  attributeRestrictions: null
  resources:
    - gitservers
    - gitservers/status
    - gitservers/finalizers
    - codebases
    - codebases/status
    - codebases/finalizers
    - codebasebranches
    - codebasebranches/status
    - codebasebranches/finalizers
    - codebaseimagestreams
    - codebaseimagestreams/status
    - codebaseimagestreams/finalizers
    - cdpipelines
    - cdpipelines/status
    - cdpipelines/finalizers
    - stages
    - stages/status
    - stages/finalizers
    - sonars
    - sonars/finalizers
    - sonars/status
    - nexuses
    - nexuses/finalizers
    - nexuses/status
    - adminconsoles
    - adminconsoles/finalizers
    - adminconsoles/status
    - gerrits
    - gerrits/finalizers
    - gerrits/status
    - jenkins
    - jenkins/finalizers
    - jenkins/status
    - jenkinses
    - jenkinses/finalizers
    - jenkinses/status
    - jenkinsserviceaccounts
    - jenkinsserviceaccounts/finalizers
    - jenkinsserviceaccounts/status
    - jenkinsscripts
    - jenkinsscripts/finalizers
    - jenkinsscripts/status
    - deployments/finalizers
    - deployments/finalizers.extensions
    - gerritreplicationconfigs
    - gerritreplicationconfigs/status
    - keycloaks
    - keycloaks/finalizers
    - keycloaks/status
    - keycloakclients
    - keycloakclients/finalizers
    - keycloakclients/status
    - keycloakrealms
    - keycloakrealms/finalizers
    - keycloakrealms/status
    - edpcomponents
    - edpcomponents/finalizers
    - edpcomponents/status
    - namespaces
    - namespaces/finalizers
    - namespaces/status
    - jenkinsfolders
    - jenkinsfolders/finalizers
    - jenkinsfolders/status
    - jiraservers
    - jiraservers/finalizers
    - jiraservers/status
  verbs:
    - '*'
---
# Source: edp-install/templates/kubernetes/clusterrolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edp-deploy-role-edp
subjects:
- kind: ServiceAccount
  name: edp
  namespace: edp
---
# Source: edp-install/templates/kubernetes/rolebinding_edp_deploy_role_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edp-deploy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edp-deploy-role-edp
subjects:
  - kind: ServiceAccount
    name: edp
    namespace: edp
---
# Source: edp-install/templates/gitlab-ci-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: gitlab-ci
  name: gitlab-ci
  namespace: edp
rules:
- apiGroups:
    - "*"
  resources:
    - codebasebranches
    - codebasebranches/status
    - codebaseimagestreams
    - codebaseimagestreams/status
    - configmaps
    - gittags
    - gittags/status
    - imagestreamimages
    - imagestreammappings
    - imagestreams
    - imagestreams/layers
    - imagestreams/secrets
    - imagestreamtags
    - imagestreamtags/status
  verbs:
    - '*'
---
# Source: edp-install/templates/gitlab-ci-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: gitlab-ci
  name: gitlab-ci
  namespace: edp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-ci
subjects:
- kind: ServiceAccount
  name: gitlab-ci
  namespace: edp
---
# Source: edp-install/templates/kubernetes/rolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edp-edp-admin
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: edp
---
# Source: edp-install/templates/db/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: edp-db
spec:
  ports:
    - name: db
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: edp-db
  type: ClusterIP
---
# Source: edp-install/templates/service/postgres.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Service
metadata:
  name: postgres
spec:
  version: "9.6"
  description: "Template for Postgres service"
  url: "epamedp/postgres"
  icon: ""
---
# Source: edp-install/templates/service/rabbit-mq.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Service
metadata:
  name: rabbit-mq
spec:
  version: "3.7.15-management"
  description: "Template for RabbitMq service"
  url: "epamedp/rabbitmq"
  icon: "PHN2ZyB3aWR0aD0iMjM2MiIgaGVpZ2h0PSIyNTAwIiB2aWV3Qm94PSIwIDAgMjU2IDI3MSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJ4TWlkWU1pZCI+PHBhdGggZD0iTTI0NS40NCAxMDguMzA4aC04NS4wOWE3LjczOCA3LjczOCAwIDAgMS03LjczNS03LjczNHYtODguNjhDMTUyLjYxNSA1LjMyNyAxNDcuMjkgMCAxNDAuNzI2IDBoLTMwLjM3NWMtNi41NjggMC0xMS44OSA1LjMyNy0xMS44OSAxMS44OTR2ODguMTQzYzAgNC41NzMtMy42OTcgOC4yOS04LjI3IDguMzFsLTI3Ljg4NS4xMzNjLTQuNjEyLjAyNS04LjM1OS0zLjcxNy04LjM1LTguMzI1bC4xNzMtODguMjQxQzU0LjE0NCA1LjMzNyA0OC44MTcgMCA0Mi4yNCAwSDExLjg5QzUuMzIxIDAgMCA1LjMyNyAwIDExLjg5NFYyNjAuMjFjMCA1LjgzNCA0LjcyNiAxMC41NiAxMC41NTUgMTAuNTZIMjQ1LjQ0YzUuODM0IDAgMTAuNTYtNC43MjYgMTAuNTYtMTAuNTZWMTE4Ljg2OGMwLTUuODM0LTQuNzI2LTEwLjU2LTEwLjU2LTEwLjU2em0tMzkuOTAyIDkzLjIzM2MwIDcuNjQ1LTYuMTk4IDEzLjg0NC0xMy44NDMgMTMuODQ0SDE2Ny42OWMtNy42NDYgMC0xMy44NDQtNi4xOTktMTMuODQ0LTEzLjg0NHYtMjQuMDA1YzAtNy42NDYgNi4xOTgtMTMuODQ0IDEzLjg0NC0xMy44NDRoMjQuMDA1YzcuNjQ1IDAgMTMuODQzIDYuMTk4IDEzLjg0MyAxMy44NDR2MjQuMDA1eiIgZmlsbD0iI0Y2MCIvPjwvc3ZnPg=="
---
# Source: edp-install/templates/db/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  generation: 1
  labels:
    app: edp-db
  name: edp-db
spec:
  selector:
    matchLabels:
      app: edp-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: edp-db
    spec:
      containers:
        - env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: super-admin-db
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: super-admin-db
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: POSTGRES_DB
              value: edp-db
          image: postgres:9.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP -U postgres -d postgres
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          name: edp-db
          ports:
            - containerPort: 5432
              name: db
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP -U postgres -d postgres
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: edp-db
      securityContext:
        runAsUser: 999
        runAsNonRoot: true
        fsGroup: 999
      serviceAccountName: edp
      volumes:
        - name: edp-db
          persistentVolumeClaim:
            claimName: edp-db
---
# Source: edp-install/templates/init_db_job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
spec:
  backoffLimit: 25
  template:
    metadata:
      name: db-init
      labels:
        app: edp-db
    spec:
      restartPolicy: Never
      containers:
        - image: postgres:9.6
          name: db-init
          command:
            - "/bin/bash"
            - "-c"
            - "psql -h $(PGHOST) -d $(POSTGRES_DB) -U $(POSTGRES_USER) -c 'CREATE SCHEMA IF NOT EXISTS \"edp\"; \
              DO \
              $do$ \
              BEGIN \
                 IF NOT EXISTS (SELECT 1 FROM pg_user WHERE usename = '\u005C''\u0027'$(TENANT_ADMIN_USERNAME)'\u005C''\u0027') THEN \
                    CREATE USER \"$(TENANT_ADMIN_USERNAME)\" WITH PASSWORD '\u005C''\u0027'$(TENANT_ADMIN_PASSWORD)'\u005C''\u0027'; \
                 END IF; \
              END \
              $do$; \
              GRANT ALL PRIVILEGES ON SCHEMA \"edp\" TO \"$(TENANT_ADMIN_USERNAME)\"';"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: super-admin-db
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: super-admin-db
                  key: password
            - name: TENANT_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-admin-console
                  key: username
            - name: TENANT_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-admin-console
                  key: password
            - name: POSTGRES_DB
              value: edp-db
            - name: PGHOST
              value: 
      initContainers:
        - image: postgres:9.6
          name: db-wait
          command:
            - /bin/bash
            - -c
            - while ! pg_isready -d $(POSTGRES_DB) -h $(PGHOST) -U $(POSTGRES_USER)  </dev/null; do echo waiting for edp-install-wizard;
              sleep 10; done;
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: super-admin-db
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: super-admin-db
                  key: password
            - name: TENANT_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-admin-console
                  key: username
            - name: TENANT_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-admin-console
                  key: password
            - name: POSTGRES_DB
              value: edp-db
            - name: PGHOST
              value:
---
# Source: edp-install/templates/edp-component/kubernetes/docker-registry.yaml
apiVersion: v1.edp.epam.com/v1alpha1
kind: EDPComponent
metadata:
  name: docker-registry
spec:
  type: docker-registry
  url: 093899590031.dkr.ecr.eu-central-1.amazonaws.com
  visible: true
  icon: 
---
# Source: edp-install/templates/edp-component/kubernetes/kubernetes-console.yaml
apiVersion: v1.edp.epam.com/v1alpha1
kind: EDPComponent
metadata:
  name: kubernetes-console
spec:
  type: kubernetes-console
  url: https://5B1468C7DC248E401E445D5B8E98ED58.sk1.eu-central-1.eks.amazonaws.com
  visible: false
  icon: stub-value
---
# Source: edp-install/templates/edp-component/kubernetes/kubernetes.yaml
apiVersion: v1.edp.epam.com/v1alpha1
kind: EDPComponent
metadata:
  name: kubernetes
spec:
  type: kubernetes
  url: https://master.delivery.aws.main.edp.projects.epam.com
  visible: true
  icon: 

